{
  "name": "node3",
  "version": "1.0.0",
  "description": "1. Wykorzystując zdobytą wiedzę z poprzednich zajęć skorzystaj z zewnętrznej biblioteki\r 'yargs' (https://www.npmjs.com/package/yargs) oraz wbudowanego modułu file\r system(fs) i stwórz aplikację która zapisze przekazane argumenty\r > node app.js --name Jan --lastname Nowak\r efektem końcowym powinien być plik z zawartością:\r {\"name\":\"Jan\",\"lastname\":\"Nowak\"}\r podpowiedź: aby możliwe było zapisanie naszego obiektu musimy go przekonwertować do\r postaci tekstowej(`string`) funkcją `JSON.stringify()`\r 2. Wykorzystując plik wynikowy z zadania 1 odczytaj plik i wyświetl jedynie nazwisko\r (`lastname`) w konsoli.\r Końcowym efektem jest wyświetlenie na konsoli nazwiska zapisanego w pliku.\r podpowiedź: aby wczytać dany plik wykorzystujemy asynchroniczną funkcję `readFile()` z\r modułu wbudowanego(`fs`). Kolejnym elementem jest przekonwertowanie wczytanego\r ciągu znaków do obiektu wykorzystując funkcję `JSON.parse()`\r 3. Bazując na zadaniu 2 zabezpieczmy naszą aplikację tak aby w przypadku błędu\r odczytu pliku(zła nazwa pliku/inny rodzaj błędu) poinformowała użytkownika o\r problemie w konsoli.\r 4. Stwórz aplikację która pobierze informację o użytkowniku podając jego id z API:\r https://jsonplaceholder.typicode.com/users/{ID}\r i wyświetl w konsoli współrzędne geograficzne skąd dany użytkownik pochodzi oraz\r jego imię.\r Endpoint z przykładowym ID: https://jsonplaceholder.typicode.com/users/2\r Uruchomienie aplikacji:\r > node app.js\r Wynik w konsoli\r lat -43.9509\r lng -34.4618\r 5. Rozszerzmy zadanie 4 tak aby nasza aplikacja poinformowała użytkownika o błędzie\r pobierania danych lub braku szukanego użytkownika w bazie.\r Każdy `response` w swoim `callback` posiada informacje niezbędne do sprawdzenia\r poprawności pobranych danych, taki callback wygląda następująco:\r function callback(error, response, body) {\r // … ciało funkcji\r }\r error – jest błędem który informuję nas iż jest problem z połączeniem do serwera\r response – jest naszą odpowiedzią która zawiera informacje jakie serwer nam zwrócił(w\r naszym zadaniu istotny jest `statusCode`, w przypadku zwrócenia poprawnie danych\r otrzymamy kod z numerem 200 (https://pl.wikipedia.org/wiki/Kod_odpowiedzi_HTTP) w\r innym przypadku dostaniemy inny kod.\r body – dane zwrócone z naszego API.\r W tym zadaniu pobawmy się w debugowanie! Zobaczmy kiedy i jakie dane przychodzą z\r serwera!\r 6. Dodajmy do zadania 5 możliwość dynamicznego wprowadzania ID poprzez wczytanie\r zewnętrznej biblioteki `yargs`\r > node app.js --id=2\r Wynik w konsoli:\r Ervin Howell\r lat -43.9509\r lng -34.4618\r > node app.js --id=20\r Wynik w konsoli:\r User not found.\r 7. Wykorzystując zadanie 6 dodajmy opcję pobrania pogody dla wczytanego\r użytkownika\r Endpoint wygląda następująca:\r https://api.openweathermap.org/data/2.5/weather?appid=0ed761300a2725ca778c07831a\r e64d6e&lat={LAT}&lon={LNG}\r Pod kluczem {LAT} i {LNG} powinniśmy podać wczytane dane z naszego wcześniejszego\r endpointu.\r 8. Podobnie jak w zadaniu 5 zabezpieczmy naszą aplikację z zadania 7 tak aby\r poinformować użytkownika o przypadkowych problemach z naszym API.\r 9. Podzielmy naszą aplikację z punktu 8 na moduły odpowiednio:\r app.js – plik główny który uruchomi naszą aplikację i wywoła funkcje z naszego modułu\r user.js\r user.js – plik z pobieraniem danych użytkownika\r weather.js – plik z pobieraniem danych o prognozie pogody\r DROBNE WSKAZÓWKI\r 1. Konwersja obiektu do postaci tekstowej(string)\r const obj = {\r  name: 'Jan',\r  lastname: 'Nowak'\r };\r const objString = JSON.stringify(obj);\r console.log(objString);\r wynik: {\"name\":\"Jan\",\"lastname\":\"Nowak\"}\r 2. Konwersja tekstu typu JSON do obiektu:\r const objString = '{\"name\":\"Jan\",\"lastname\":\"Nowak\"}';\r const obj = JSON.parse(objString);\r console.log(obj.name)\r Wynik Jan",
  "main": "1.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "lodash": "^4.17.11",
    "request": "^2.88.0",
    "yargs": "^12.0.5"
  }
}
